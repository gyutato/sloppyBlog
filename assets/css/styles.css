@charset "UTF-8";
body {
  min-width: 320px;
  line-height: normal;
  font-size: 14px;
  color: #000;
  scroll-behavior: smooth;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

body,
input,
textarea,
select,
table,
button,
code {
  font-family: -apple-system, BlinkMacSystemFont, helvetica, Apple SD Gothic Neo, sans-serif;
  font-size: 16px;
}

*,
*::before,
*::after {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  margin: 0;
  padding: 0;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}

.hidden,
[hidden] {
  display: none !important;
}

ul,
ol,
li {
  list-style: none;
}

a {
  color: inherit;
  cursor: pointer;
  text-decoration: none;
}

a:hover, a:focus {
  text-decoration: none;
}

button {
  border: 0;
  background-color: transparent;
  cursor: pointer;
}

button:disabled {
  cursor: not-allowed;
}

select,
input,
textarea,
button {
  -webkit-appearance: none;
}

input[type="number"] {
  -moz-appearance: textfield;
}

input:disabled {
  background-color: rgba(255, 255, 255, 0);
  cursor: not-allowed;
}

select {
  border: 0;
  background-color: transparent;
  cursor: pointer;
}

select::-ms-expand {
  display: none;
}

input,
textarea {
  font-size: inherit;
  border: 0;
}

input::-webkit-input-placeholder,
textarea::-webkit-input-placeholder {
  /* Chrome, Safari, Firefox */
  color: #444;
  opacity: 1;
}

input:-ms-input-placeholder,
textarea:-ms-input-placeholder {
  /* Chrome, Safari, Firefox */
  color: #444;
  opacity: 1;
}

input::-ms-input-placeholder,
textarea::-ms-input-placeholder {
  /* Chrome, Safari, Firefox */
  color: #444;
  opacity: 1;
}

input::placeholder,
textarea::placeholder {
  /* Chrome, Safari, Firefox */
  color: #444;
  opacity: 1;
}

input:-ms-input-placeholder,
textarea:-ms-input-placeholder {
  /* IE, Edge */
  color: #444;
  opacity: 1;
}

input[readonly]::-webkit-input-placeholder, input:disabled::-webkit-input-placeholder,
textarea[readonly]::-webkit-input-placeholder,
textarea:disabled::-webkit-input-placeholder {
  /* Chrome, Safari, Firefox */
  color: rgba(0, 0, 0, 0.2);
  opacity: 1;
}

input[readonly]:-ms-input-placeholder, input:disabled:-ms-input-placeholder,
textarea[readonly]:-ms-input-placeholder,
textarea:disabled:-ms-input-placeholder {
  /* Chrome, Safari, Firefox */
  color: rgba(0, 0, 0, 0.2);
  opacity: 1;
}

input[readonly]::-ms-input-placeholder, input:disabled::-ms-input-placeholder,
textarea[readonly]::-ms-input-placeholder,
textarea:disabled::-ms-input-placeholder {
  /* Chrome, Safari, Firefox */
  color: rgba(0, 0, 0, 0.2);
  opacity: 1;
}

input[readonly]::placeholder, input:disabled::placeholder,
textarea[readonly]::placeholder,
textarea:disabled::placeholder {
  /* Chrome, Safari, Firefox */
  color: rgba(0, 0, 0, 0.2);
  opacity: 1;
}

input[readonly]:-ms-input-placeholder, input:disabled:-ms-input-placeholder,
textarea[readonly]:-ms-input-placeholder,
textarea:disabled:-ms-input-placeholder {
  /* IE, Edge */
  color: rgba(0, 0, 0, 0.2);
  opacity: 1;
}

input::-ms-clear, input::-ms-reveal,
textarea::-ms-clear,
textarea::-ms-reveal {
  /* IE, Edge */
  display: none;
}

input::-webkit-inner-spin-button, input::-webkit-outer-spin-button,
textarea::-webkit-inner-spin-button,
textarea::-webkit-outer-spin-button {
  -webkit-appearance: none;
}

.screen-out {
  position: absolute;
  width: 0;
  height: 0;
  line-height: 0;
  overflow: hidden;
  text-indent: -9999px;
}

.scroll-x {
  overflow-x: auto;
  overflow-y: hidden;
  white-space: nowrap;
  -webkit-overflow-scrolling: touch;
  -ms-overflow-style: none;
  scrollbar-width: none;
}

.scroll-x::-webkit-scrollbar {
  display: none;
}

/* 진입 페이지라고 생각해도 되지만 메뉴 페이지 위에 뜨는 컴포넌트라고 생각할 수도 있음 */
.dimmed-layer {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.8);
  z-index: 9999;
}

.order-type-popup {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  padding: 32px 0 40px;
  background-color: #fff;
  /* 상위 요소 (div) 에서 여백 등 구성, 
    내부 요소(p 등)은 딱 요소 관련 스타일링만 하길 권장 */
  text-align: center;
  border-radius: 16px 16px 0 0;
  z-index: 10000;
}

.order-type-popup .title {
  /*sass의 장점! 네스팅 가능:
        order-type-popup이라는 흰색 요소 안의 제목 요소에 대한 스타일링이라는 것이 잘 드러남 */
  font-size: 20px;
  font-weight: 700;
  color: #000;
}

.order-type-popup .type-list {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  margin-top: 32px;
}

.order-type-popup .type-item {
  -webkit-box-flex: 1;
      -ms-flex: 1;
          flex: 1;
}

.order-type-popup .type-item + .type-item {
  border-left: 1px solid #f2f2f2;
}

.order-type-popup .icon {
  width: 100px;
  height: auto;
  color: #03c75a;
}

.order-type-popup .desc {
  margin-top: 8px;
  font-size: 15px;
  line-height: 1.5;
  font-weight: 600;
  color: #000;
}

.order-type-popup .btn-selection {
  display: inline-block;
  margin-top: 10px;
  padding: 6px 18px;
  font-size: 16px;
  font-weight: 700;
  background-color: #424242;
  color: #fff;
  border-radius: 28px;
}

.header-area {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  background-color: #03c75a;
  color: #fff;
  z-index: 5000;
}

.header-area .place-header {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
  height: 48px;
}

.header-area .place-header .title {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  font-size: 20px;
  font-weight: 600;
}

.header-area .place-header .link-back {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  /* 컨테이너인 title이 flex 속성을 가졌으니
            여기다가는 display: flex를 굳이 해주지 않아도 될 것 같은데,
            주석처리하거나 block으로 바꾸면 묘하게 텍스트와 가운데 정렬이 안맞게 된다! 왜??
            a 태그 자체는 넓이나 높이를 갖지 않고,
            display: flex를 해주면 요소의 height는 컨테이너의 높이만큼 늘어나게 된다.
            이 때 컨테이너의 높이를 결정하는 게 여기서는 요소(img)의 높이이므로 컨테이너의 크기와 요소(img)의 크기가 일치하게 되는 것? 
            아닌데.. block도 상관없지않나.. 모르겠다.... */
}

.header-area .place-header .my-orders {
  padding-right: 18px;
  font-size: 15px;
  font-weight: 700;
}

.header-area .place-tab {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  height: 46px;
  background-color: #03b753;
  overflow-x: auto;
  overflow-y: hidden;
  white-space: nowrap;
  -webkit-overflow-scrolling: touch;
  -ms-overflow-style: none;
  scrollbar-width: none;
  /* 프리셋으로 만들면 html의 클래스를 통해 제어해야 하지만,
        mixin으로 만들면 스타일은 전부 스타일(scss)파일 안에서 제어할 수 있다는 장점이 있다. */
}

.header-area .place-tab::-webkit-scrollbar {
  display: none;
}

.header-area .tab-inner {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
  padding: 0 8px;
  width: 100%;
}

.header-area .tab {
  -webkit-box-flex: 1;
      -ms-flex: 1;
          flex: 1;
  text-align: center;
  opacity: .7;
  padding: 0 12px;
  font-size: 16px;
}

.header-area .tab.is-active {
  font-weight: 700;
  opacity: 1;
}

.header-area .tab.is-active .txt::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  height: 2px;
  background-color: #fff;
}

.header-area .tab .txt {
  line-height: 46px;
  position: relative;
  display: inline-block;
  padding: 0 4px;
}
/*# sourceMappingURL=styles.css.map */